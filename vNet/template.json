{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "The location of the resources."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {
                "DeploymentMethod": "IaC / ARM template"
            },
            "metadata": {
                "description": "Tags to be applied to all resources."
            }
        },
        "resourcePrefix": {
            "type": "string",
            "metadata": {
                "description": "Prefix to be appended to all resource names."
            }
        },
        "virtualNetworksAddress": {
            "type": "string",
            "metadata": {
                "description": "The address space of the virtual network must be /20 and include a slash 20 at the end."
              }
        },
        "FirewallApplianceInUse": {
             "type": "string",
             "allowedValues": ["yes", "no"],
             "metadata": {
               "description": "Specifies whether the firewall appliance is in use. If YES, the route table will be created ad assosiated with all subbnets"
             }
        }
    },
    "variables": {
        "virtualNetworksName": "[concat(parameters('resourcePrefix'), '-', parameters('location'), '-vNET-01')]",
        "DefaultRouteTableName": "[concat(parameters('resourcePrefix'), '-', parameters('location'), '-RouteTable-01')]",
        "isSlash20": "[equals(split(parameters('virtualNetworksAddress'), '/')[1], '20')]",
        "firstTwoOctets": "[take(split(parameters('virtualNetworksAddress'), '.'), 2)]",
        "baseThirdOctet": "[int(split(parameters('virtualNetworksAddress'), '.')[2])]",
        "thirdOctetCheck": "[div(variables('baseThirdOctet'), 16)]",
        "isValidThirdOctet": "[equals(variables('thirdOctetCheck'), int(variables('thirdOctetCheck')))]",
        "errorMessage": "[if(and(variables('isSlash20'), variables('isValidThirdOctet')), json('null'), json('\"The virtual network address space must be /20 and the third octet must be valid.\"'))]",
        "baseThirdOctetAdjusted": "[if(variables('isValidThirdOctet'), variables('baseThirdOctet'), 'Invalid')]",
        "baseAddressPrefix": "[concat(variables('firstTwoOctets')[0], '.', variables('firstTwoOctets')[1], '.')]",
        "FirewallExternalSubnet": "[if(and(variables('isSlash20'), variables('isValidThirdOctet')), concat(variables('baseAddressPrefix'), add(variables('baseThirdOctetAdjusted'), 15), '.192/26'), variables('errorMessage'))]",
        "FirewallExternalInterfaceIP": "[if(and(variables('isSlash20'), variables('isValidThirdOctet')), concat(variables('baseAddressPrefix'), add(variables('baseThirdOctetAdjusted'), 15), '.254'), variables('errorMessage'))]",
        "FirewallInternalSubnet": "[if(and(variables('isSlash20'), variables('isValidThirdOctet')), concat(variables('baseAddressPrefix'), variables('baseThirdOctetAdjusted'), '.0/26'), variables('errorMessage'))]",
        "FirewallInternalInterfaceIP": "[if(and(variables('isSlash20'), variables('isValidThirdOctet')), concat(variables('baseAddressPrefix'), variables('baseThirdOctetAdjusted'), '.4'), variables('errorMessage'))]",
        "GatewaySubnet": "[if(and(variables('isSlash20'), variables('isValidThirdOctet')), concat(variables('baseAddressPrefix'), add(variables('baseThirdOctetAdjusted'), 15), '.128/26'), variables('errorMessage'))]",
        "ServerSubnet1": "[if(and(variables('isSlash20'), variables('isValidThirdOctet')), concat(variables('baseAddressPrefix'), add(variables('baseThirdOctetAdjusted'), 1), '.0/24'), variables('errorMessage'))]",
        "VirtualDesktopSubnet1": "[if(and(variables('isSlash20'), variables('isValidThirdOctet')), concat(variables('baseAddressPrefix'), add(variables('baseThirdOctetAdjusted'), 6), '.0/24'), variables('errorMessage'))]",
        "TestAndDevSubnet1": "[if(and(variables('isSlash20'), variables('isValidThirdOctet')), concat(variables('baseAddressPrefix'), add(variables('baseThirdOctetAdjusted'), 11), '.0/24'), variables('errorMessage'))]",
        "BackupApplianceSubnet1": "[if(and(variables('isSlash20'), variables('isValidThirdOctet')), concat(variables('baseAddressPrefix'), add(variables('baseThirdOctetAdjusted'), 13), '.0/24'), variables('errorMessage'))]",
    },
    "resources": [
        {
            "type": "Microsoft.Network/routeTables",
            "apiVersion": "2023-11-01",
            "name": "[variables('DefaultRouteTableName')]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "condition": "[equals(parameters('FirewallApplianceInUse'), 'yes')]",
            "properties": {
                "disableBgpRoutePropagation": false,
                "routes": [
                    {
                        "name": "Internet-Route",
                        "id": "[resourceId('Microsoft.Network/routeTables/routes', variables('DefaultRouteTableName'), 'Internet-Route')]",
                        "properties": {
                            "addressPrefix": "0.0.0.0/0",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('FirewallInternalInterfaceIP')]",
                            "hasBgpOverride": false
                        },
                        "type": "Microsoft.Network/routeTables/routes"
                    },
                    {
                        "name": "10.0.0.0_8-Route",
                        "id": "[resourceId('Microsoft.Network/routeTables/routes', variables('DefaultRouteTableName'), '10.0.0.0_8-Route')]",
                        "properties": {
                            "addressPrefix": "10.0.0.0/8",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('FirewallInternalInterfaceIP')]",
                            "hasBgpOverride": false
                        },
                        "type": "Microsoft.Network/routeTables/routes"
                    },
                    {
                        "name": "192.168.0.0_16-Route",
                        "id": "[resourceId('Microsoft.Network/routeTables/routes', variables('DefaultRouteTableName'), '192.168.0.0_16-Route')]",
                        "properties": {
                            "addressPrefix": "192.168.0.0/16",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('FirewallInternalInterfaceIP')]",
                            "hasBgpOverride": false
                        },
                        "type": "Microsoft.Network/routeTables/routes"
                    },
                    {
                        "name": "172.16.0.0_12-Route",
                        "id": "[resourceId('Microsoft.Network/routeTables/routes', variables('DefaultRouteTableName'), '172.16.0.0_12-Route')]",
                        "properties": {
                            "addressPrefix": "172.16.0.0/12",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('FirewallInternalInterfaceIP')]",
                            "hasBgpOverride": false
                        },
                        "type": "Microsoft.Network/routeTables/routes"
                    },
                    {
                        "name": "FirewallExternalSubnet-Route",
                        "id": "[resourceId('Microsoft.Network/routeTables/routes', variables('DefaultRouteTableName'), 'FirewallExternalSubnet-Route')]",
                        "properties": {
                            "addressPrefix": "[variables('FirewallExternalSubnet')]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('FirewallInternalInterfaceIP')]",
                            "hasBgpOverride": false
                        },
                        "type": "Microsoft.Network/routeTables/routes"
                    }
                ]
            }
        },
        {
        "type": "Microsoft.Network/virtualNetworks",
        "apiVersion": "2023-11-01",
        "name": "[variables('virtualNetworksName')]",
        "location": "[parameters('location')]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/routeTables', variables('DefaultRouteTableName'))]"
        ],
        "tags": "[parameters('tags')]",
        "properties": {
            "addressSpace": {
                "addressPrefixes": [
                    "[parameters('virtualNetworksAddress')]"
                ]
            },
            "encryption": {
                "enabled": false,
                "enforcement": "AllowUnencrypted"
            },
            "subnets": [
                {
                    "name": "GatewaySubnet",
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworksName'), 'GatewaySubnet')]",
                    "properties": {
                        "addressPrefixes": [
                            "[variables('GatewaySubnet')]"
                        ],
                        "delegations": [],
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Disabled"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets"
                },
                {
                    "name": "FirewallExternalSubnet",
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworksName'), 'FirewallExternalSubnet')]",
                    "properties": {
                        "addressPrefixes": [
                            "[variables('FirewallExternalSubnet')]"
                        ],
                        "delegations": [],
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Enabled"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets"
                },
                {
                    "name": "FirewallinternalSubnet",
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworksName'), 'FirewallInternalSubnet')]",
                    "properties": {
                        "addressPrefixes": [
                            "[variables('FirewallinternalSubnet')]"
                        ],
                        "routeTable": "[if(equals(parameters('FirewallApplianceInUse'), 'yes'),  json(concat('{\"id\": \"', resourceId('Microsoft.Network/routeTables', variables('DefaultRouteTableName')), '\"}')), json('null'))]",
                        "delegations": [],
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Enabled"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets"
                },
                {
                    "name": "ServerSubnet1",
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworksName'), 'ServerSubnet1')]",
                    "properties": {
                        "addressPrefixes": [
                            "[variables('ServerSubnet1')]"
                        ],
                        "routeTable": "[if(equals(parameters('FirewallApplianceInUse'), 'yes'),  json(concat('{\"id\": \"', resourceId('Microsoft.Network/routeTables', variables('DefaultRouteTableName')), '\"}')), json('null'))]",
                        "delegations": [],
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Enabled"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets"
                },
                {
                    "name": "BackupApplianceSubnet1",
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworksName'), 'BackupApplianceSubnet1')]",
                    "properties": {
                        "addressPrefixes": [
                            "[variables('BackupApplianceSubnet1')]"
                        ],
                        "routeTable": "[if(equals(parameters('FirewallApplianceInUse'), 'yes'),  json(concat('{\"id\": \"', resourceId('Microsoft.Network/routeTables', variables('DefaultRouteTableName')), '\"}')), json('null'))]",
                        "delegations": [],
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Enabled"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets"
                },
                {
                    "name": "TestAndDevSubnet1",
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworksName'), 'TestAndDevSubnet1')]",
                    "properties": {
                        "addressPrefixes": [
                            "[variables('TestAndDevSubnet1')]"
                        ],
                        "routeTable": "[if(equals(parameters('FirewallApplianceInUse'), 'yes'),  json(concat('{\"id\": \"', resourceId('Microsoft.Network/routeTables', variables('DefaultRouteTableName')), '\"}')), json('null'))]",
                        "delegations": [],
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Enabled"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets"
                },
                {
                    "name": "VirtualDesktopSubnet1",
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworksName'), 'VirtualDesktopSubnet1')]",
                    "properties": {
                        "addressPrefixes": [
                            "[variables('VirtualDesktopSubnet1')]"
                        ],
                        "routeTable": "[if(equals(parameters('FirewallApplianceInUse'), 'yes'),  json(concat('{\"id\": \"', resourceId('Microsoft.Network/routeTables', variables('DefaultRouteTableName')), '\"}')), json('null'))]",
                        "delegations": [],
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Enabled"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets"
                }
            ],
            "virtualNetworkPeerings": [],
            "enableDdosProtection": false
        }
        }
    
    ],
    "outputs": {
    "virtualNetworksAddress": {
        "type": "string",
        "value": "[parameters('virtualNetworksAddress')]"
        },
    "GatewaySubnet": {
        "type": "string",
        "value": "[variables('GatewaySubnet')]"
        },
    "FirewallExternalSubnet": {
      "type": "string",
      "value": "[variables('FirewallExternalSubnet')]"
    },
    "FirewallExternalInterfaceIP": {
      "type": "string",
      "value": "[variables('FirewallExternalInterfaceIP')]"
    },
    "FirewallInternalSubnet": {
      "type": "string",
      "value": "[variables('FirewallInternalSubnet')]"
    },
    "FirewallInternalInterfaceIP": {
      "type": "string",
      "value": "[variables('FirewallInternalInterfaceIP')]"
    },
    "ServerSubnet1": {
      "type": "string",
      "value": "[variables('ServerSubnet1')]"
    },
    "VirtualDesktopSubnet1": {
      "type": "string",
      "value": "[variables('VirtualDesktopSubnet1')]"
    },
    "TestAndDevSubnet1": {
      "type": "string",
      "value": "[variables('TestAndDevSubnet1')]"
    },
    "BackupApplianceSubnet1": {
      "type": "string",
      "value": "[variables('BackupApplianceSubnet1')]"
    },
    "RouteTable": {
        "type": "string",
        "value":   "[if(equals(parameters('FirewallApplianceInUse'), 'yes'), 'Route Table created and associated with all subnets.', 'No route table was created and no subnet association was made.')]"
    }
  }
}
